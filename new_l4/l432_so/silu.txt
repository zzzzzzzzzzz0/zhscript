debug_liucheng_里白字是关键字，黄字是逻辑

居然还没有参数提示
-S 语法文件
-E 错误信息文件
-I 初始化文件，集成文件
-P 参数
---- 切换开关，中间全部是参数


/*使“解释”难以实现，也使两个关键字无法直接书写*/

annotation

因为()实际上是算术的专用，所以英文版的先了只能是{}

字符串中类$()的取值关键字
［ ］ 就用这个而不再用内容？
〔 〕 废弃？
。 ！（达意） ？（这个问号）
：
， ； 多一个？
、

如果不以句号为结尾，这样，then、else也不露头
语法加亮 折叠

用from、to来做错误时的信息起始终止，出错现场就采集吧？

函数的缺省值，c*(a字符0bcd)
0表示装载内存，不好

错误返回系统还真是个麻烦事，怎么不带参数，又能

顿号只用于函数参数不用于赋值？

变
赋予1以"、先调用函数内容、参数1内容、参数1内容了、"。
为
赋予1以"、调用函数内容及参数1内容及参数1内容、"。

以
及
和
先
了
原样文字？（保持空白符）

关键字不内置，这样就是纯粹的字节比较，而不必非gb18030，这样也还有个错位的问题
get_step__(char c){
  if(c ＝ 1000)
    return 4
}

只在需要时才搜需要的关键字，这就能够隐藏关键字，让他像文字一样


解释（源，开始处，结束处，参数量，参数数组，变量数组）｛
	变量起始；
｝
这就跟全局差不多了……
这样，客观上前面就是父级的参数和变量
变量也不需要源，查找时候就是倒着查，找到或计数0位置

去引号换码的省去，一开始赋值就执行，这样地址跟内容一致，效率也高，不必每次再那啥
定义也不必去引号
目前这种不返回引号的正好

string传值其他传地址

为不使用^^（去引号换码），在赋值时就直接，这样也会速度快
如何不使用~~~，父？上级？
回车要不要做关键字？

没有读源文件
赋予“库名”以“【库】‘参数0’”。
如果存在‘库名’那么退出。

赋予‘库名’以调用“L”、“‘参数0’.so”。
调用先调用“G”、‘‘库名’’、“_init__”、“$0”、“$9”、“$19”、“$2”、“$3”、“$4”、“c*”、“c*”了、‘保留字66’、‘保留字67’。
赋予“【‘库名’】正则格”以调用“G EASZ”、‘‘库名’’、“_regexpr__”（、
	c*（src。源串）、
	c*（exp。正则表达式。默认([0-9]+)。linux版不支持\d、\s这样的简）、
	c*（fmt。输出的格式，%0至%f为对应的匹配，其他原样输出。默认%1）、
	i（top。始条匹配，从1开始，0为无限制。默认0）、
	i（btm。末条匹配。默认0）
）。
别名“【‘库名’】regexpr”以“正则格”。

赋予“【‘库名’】正则代”以调用“G EASZ”、‘‘库名’’、“_regexpreplace__”、“${l0}”（fore）、“${l0}”（多参）、“$11”、“$1”、
	“c*”（src）、“c*”（from）、“c*”（代码。传3个参数，参数1一般也是返回值，参数2、3是序号）（、c*（cflags，默认e）、c*（eflags））。
赋予“【‘库名’】正则迭”以调用“G EASZ”、‘‘库名’’、“_regexpreplace__”、“${l0}”、“${l1}”、“$11”、“$1”、
	“c*”、“c*”、“c*”（代码。传所有匹配参数）（、c*、c*）。
赋予“【‘库名’】正则替”以调用“G EASZ”、‘‘库名’’、“_regexpreplace__”、“${l0}”、“${l0}”、“${l0}”、“${l0}”、
	“c*”、“c*”、“c*”（to）（、c*、c*）。
别名“【‘库名’】regexpreplace”以“正则替”。
定义“【‘库名’】遍历正则”以“调用”下原样“上原样先
	调用“G EASZ”、‘‘库名’’、“_regexpreplace__”、“${l1}”、“${l1}”、“$11”、“&”、“c*”、“c*”、“c*”
	了下原样”、‘回调1【上】’、‘参数栈’。上原样。
定义“【‘库名’】迭代正则”以‘遍历正则’。

（把匹配的结果分配成形如“头之2之1”的多个变量，另有“头数目”、“头数目2”）
赋予“【‘库名’】正则攫”以调用“G ESZ”、‘‘库名’’、“_regexpr_get__”、“$1”、
	“c*”（src）、
	“c*”（exp。正则表达式）
	（、
	c*（变量头）、
	i（是否只读（readonly），默认0。另：“-”将从此开启key/val模式）、
	c*（cflags，默认e。e（REG_EXTENDED 更强大的扩展规则）、i（REG_ICASE 忽略大小写）、n（REG_NOSUB 不存储结果）、l（REG_NEWLINE 识别换行符，$尾^头））、
	c*（eflags。e（REG_NOTEOL）、b（REG_NOTBOL））、
	i（去掉重复（rmcf），默认0）
	）。
赋予“【‘库名’】正则配”以调用“G SZ”、‘‘库名’’、“_regexpr_test__”、
	“c*”、
	“c*”（exp）
	（、
	c*（cflags，默认en）、
	c*（eflags）
	）。

（废弃）
赋予“1”以调用“G ESZ”、‘‘库名’’、“_regexpr_get__”、“&”、“c*”、“c*”。
赋予“【‘库名’】正则切”以“调用”下原样“上原样‘1’下原样”、‘【上】回调1’、‘参数栈’。上原样。
赋予“【‘库名’】正则顶切”以“调用”下原样“上原样‘1’下原样”、‘【顶】回调1’、‘参数栈’。上原样。
别名“【‘库名’】regexpr_get”以“正则切”。

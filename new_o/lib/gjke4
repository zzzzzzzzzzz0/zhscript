赋予“库名”以“【库】‘参数0’”。
如果存在‘库名’那么退出。

赋予‘库名’以调用“L”、“‘参数0’.so”。
调用先调用“G”、‘‘库名’’、“_init__”、“$0”、“$9”、“$19”、“$2”、“$3”、“$4”、“$13”、“$23”、“$17”、
	“c*”、“c*”了、‘保留字66’、‘保留字67’。

赋予“【‘库名’】加反斜杠”以调用“GA”、‘‘库名’’、“_addslashes__”、“c*”、“c*”（有C、R（正则表达式）、x三种）。
赋予“【‘库名’】查找并获取”以调用“GEAZ”、‘‘库名’’、“find_and_get__”、“c*”（src）、“i”（开始位置）、“c*”（tag1）、“$11”、“$1”、
	“c*”（取信息代码）（c*截止……）。
赋予“【‘库名’】多串替换”以调用“GEAZ”、‘‘库名’’、“replace__”、“$11”、“$1”、“c*”（src）（、c* tag1、c* 代码、……）。

赋予“【‘库名’】去头尾空格”以调用“GA”、‘‘库名’’、“trim__”、“c*”、“${l3}”。
赋予“【‘库名’】去头空格”以调用“GA”、‘‘库名’’、“trim__”、“c*”、“${l1}”。
赋予“【‘库名’】去尾空格”以调用“GA”、‘‘库名’’、“trim__”、“c*”、“${l2}”。

赋予“1”以调用“GEAZ”、‘‘库名’’、“_foreach__”、“$11”、“&”、“i”、“c*”（代码）（、参数……）。
定义“【‘库名’】迭代解释”以“调用”下原样“上原样‘1’下原样”、‘回调1【上】’、0、‘参数栈’。上原样。
定义“【‘库名’】序迭代解释”以“调用”下原样“上原样‘1’下原样”、‘回调1【上】’、1、‘参数栈’。上原样。

定义“【‘库名’】遍历变量名”以“调用”下原样“上原样
	先调用“GE”、‘‘库名’’、“_for_name__”、“$11”、“&”、“c*”（代码）、“&”、“i”了
	下原样”、‘回调1【上】’、‘参数1’、如果存在“参数2”那么‘参数2’否则‘回调1【上】’、如果存在“参数3”那么‘参数3’否则“-1”。上原样。

（分配成形如“头之2之1”的多个变量，另有“头数目”、“头数目2”）
赋予“1”以调用“GiZ”、‘‘库名’’、“_new_array__”、“&”、“c*”（变量头）、“i”（几个一组）（、……）。
定义“【‘库名’】新建数组”以“调用”下原样“上原样‘1’下原样”、‘【上】回调1’、‘参数栈’。上原样。
定义“【‘库名’】新建顶数组”以“调用”下原样“上原样‘1’下原样”、‘【顶】回调1’、‘参数栈’。上原样。

赋予“1”以调用“GiZ”、‘‘库名’’、“_add_to_array__”、“&”、“c*”（变量头）、“i”（几个一组）（、……）。
定义“【‘库名’】增至数组”以“调用”下原样“上原样‘1’下原样”、‘【上】回调1’、‘参数栈’。上原样。
定义“【‘库名’】增至顶数组”以“调用”下原样“上原样‘1’下原样”、‘【顶】回调1’、‘参数栈’。上原样。

赋予“1”以调用“GiZ”、‘‘库名’’、“_array_find__”、“&”、“c*”（变量头）（、……对应匹配）。
定义“【‘库名’】搜索数组”以“调用”下原样“上原样‘1’下原样”、‘【上】回调1’、‘参数栈’。上原样。
定义“【‘库名’】搜索顶数组”以“调用”下原样“上原样‘1’下原样”、‘【顶】回调1’、‘参数栈’。上原样。

（不能简化成 “$1” ，因$1在定义的区中了）
赋予“1”以调用“GEAZ”、‘‘库名’’、“_for_array__”、“$11”、“&”、“i”（是否含序）、“i”（是否逆）、“c*”（代码）（、“c*”（变量头）……）。
定义“【‘库名’】遍历数组”以“调用”下原样“上原样‘1’下原样”、‘回调1【上】’、“0”、“0”、‘参数栈’。上原样。
定义“【‘库名’】逆遍历数组”以“调用”下原样“上原样‘1’下原样”、‘回调1【上】’、“0”、“1”、‘参数栈’。上原样。
定义“【‘库名’】序遍历数组”以“调用”下原样“上原样‘1’下原样”、‘回调1【上】’、“1”、“0”、‘参数栈’。上原样。
定义“【‘库名’】逆序遍历数组”以“调用”下原样“上原样‘1’下原样”、‘回调1【上】’、“1”、“1”、‘参数栈’。上原样。
别名“【‘库名’】迭代数组”以“遍历数组”。
别名“【‘库名’】逆迭代数组”以“逆遍历数组”。
别名“【‘库名’】序迭代数组”以“序遍历数组”。
别名“【‘库名’】逆序迭代数组”以“逆序遍历数组”。

赋予“【‘库名’】随机数种”以调用“G”、‘‘库名’’、“srand__”、“l”（0到65535，-1为以时间）。
赋予“【‘库名’】随机数组”以调用“Gi”、‘‘库名’’、“rand__”、“$1”、“c*”（变量头）、“l”（最小值）、“l”（最大值）。

赋予“【‘库名’】侦听信号”以调用“G”、‘‘库名’’、“signal__”、“i”（signum）。
赋予“【‘库名’】设侦听信号代码”以调用“G”、‘‘库名’’、“signal_cb__”、“c*”。

赋予“【‘库名’】建子进程”以调用“GBZ”、‘‘库名’’、“spawn__”（……）。

赋予“【‘库名’】分配共享内存”以调用“GB”、‘‘库名’’、“new_shm__”、“c*”（fname）、“i”（proj_id。1至255）、“i”（字节数）。
赋予“【‘库名’】连接共享内存”以调用“GB”、‘‘库名’’、“attach_shm__”、“c*”（id）。
赋予“【‘库名’】释放共享内存”以调用“GZ”、‘‘库名’’、“delete_shm__”（、“c*”（id））。
赋予“【‘库名’】得共享内存”以调用“Gc*”、‘‘库名’’、“get_shm__”、“c*”。
赋予“【‘库名’】设共享内存”以调用“Gi”、‘‘库名’’、“set_shm__”、“c*”、“c*”（内容）。

定义“【‘库名’】同时执行”以“调用”下原样“上原样
	先调用“Gi”（pid）、‘‘库名’’、“_fork_exec__”、“c*”了
	下原样”、‘参数栈’。上原样。
赋予“【‘库名’】等待退出”以调用“Gi”、‘‘库名’’、“_wait_exit_code__”、“i”。
定义“【‘库名’】同时解释”以“调用”下原样“上原样
	先调用“GiEBZ”、‘‘库名’’、“_fork_eval__”、“$11”、“&”、“c*”（代码）
	、“c*”（共享内存名）、“i”（共享内存大小）
	、“c*”（共享内存2名）、“i”（共享内存2大小）
	（、参数……）了
	下原样”、‘回调1【上】’、‘参数栈’。上原样。
定义“【‘库名’】终止同时解释”以“调用”下原样“上原样
	先调用“G”、‘‘库名’’、“_end_fork_eval__”、“c*”（上个函数的返回值）、“&”（共享内存地址）、“&”（共享内存2地址）了
	下原样”、‘参数栈’。上原样。

赋予“【‘库名’】分配内存”以调用“G&”、‘‘库名’’、“_new__”、“i”（字节数）。
赋予“【‘库名’】释放内存”以调用“GZ”、‘‘库名’’、“_delete__”（、&）。
赋予“【‘库名’】复制内存”以调用“Gc*”、‘‘库名’’、“_dup__”、“&”。
赋予“【‘库名’】内存指针”以调用“G&”、‘‘库名’’、“_pointer__”、“&”。
赋予“【‘库名’】内存指针所指”以调用“G&”、‘‘库名’’、“_pointer2__”、“&”。
